# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.bodytemplate_tags import BodytemplateTags  # noqa: F401,E501
from swagger_server import util


class Bodytemplate(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, field: str=None, measurement: str=None, tags: BodytemplateTags=None):  # noqa: E501
        """Bodytemplate - a model defined in Swagger

        :param field: The field of this Bodytemplate.  # noqa: E501
        :type field: str
        :param measurement: The measurement of this Bodytemplate.  # noqa: E501
        :type measurement: str
        :param tags: The tags of this Bodytemplate.  # noqa: E501
        :type tags: BodytemplateTags
        """
        self.swagger_types = {
            'field': str,
            'measurement': str,
            'tags': BodytemplateTags
        }

        self.attribute_map = {
            'field': 'field',
            'measurement': 'measurement',
            'tags': 'tags'
        }
        self._field = field
        self._measurement = measurement
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt) -> 'Bodytemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The bodytemplate of this Bodytemplate.  # noqa: E501
        :rtype: Bodytemplate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def field(self) -> str:
        """Gets the field of this Bodytemplate.


        :return: The field of this Bodytemplate.
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field: str):
        """Sets the field of this Bodytemplate.


        :param field: The field of this Bodytemplate.
        :type field: str
        """
        if field is None:
            raise ValueError("Invalid value for `field`, must not be `None`")  # noqa: E501

        self._field = field

    @property
    def measurement(self) -> str:
        """Gets the measurement of this Bodytemplate.


        :return: The measurement of this Bodytemplate.
        :rtype: str
        """
        return self._measurement

    @measurement.setter
    def measurement(self, measurement: str):
        """Sets the measurement of this Bodytemplate.


        :param measurement: The measurement of this Bodytemplate.
        :type measurement: str
        """
        if measurement is None:
            raise ValueError("Invalid value for `measurement`, must not be `None`")  # noqa: E501

        self._measurement = measurement

    @property
    def tags(self) -> BodytemplateTags:
        """Gets the tags of this Bodytemplate.


        :return: The tags of this Bodytemplate.
        :rtype: BodytemplateTags
        """
        return self._tags

    @tags.setter
    def tags(self, tags: BodytemplateTags):
        """Sets the tags of this Bodytemplate.


        :param tags: The tags of this Bodytemplate.
        :type tags: BodytemplateTags
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags
