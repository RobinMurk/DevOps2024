# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Humidity(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, measurement: str=None, time: str=None, station: str=None, temp: float=None):  # noqa: E501
        """Humidity - a model defined in Swagger

        :param measurement: The measurement of this Humidity.  # noqa: E501
        :type measurement: str
        :param time: The time of this Humidity.  # noqa: E501
        :type time: str
        :param station: The station of this Humidity.  # noqa: E501
        :type station: str
        :param temp: The temp of this Humidity.  # noqa: E501
        :type temp: float
        """
        self.swagger_types = {
            'measurement': str,
            'time': str,
            'station': str,
            'temp': float
        }

        self.attribute_map = {
            'measurement': '_measurement',
            'time': '_time',
            'station': 'station',
            'temp': 'temp'
        }
        self._measurement = measurement
        self._time = time
        self._station = station
        self._temp = temp

    @classmethod
    def from_dict(cls, dikt) -> 'Humidity':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The humidity of this Humidity.  # noqa: E501
        :rtype: Humidity
        """
        return util.deserialize_model(dikt, cls)

    @property
    def measurement(self) -> str:
        """Gets the measurement of this Humidity.


        :return: The measurement of this Humidity.
        :rtype: str
        """
        return self._measurement

    @measurement.setter
    def measurement(self, measurement: str):
        """Sets the measurement of this Humidity.


        :param measurement: The measurement of this Humidity.
        :type measurement: str
        """
        if measurement is None:
            raise ValueError("Invalid value for `measurement`, must not be `None`")  # noqa: E501

        self._measurement = measurement

    @property
    def time(self) -> str:
        """Gets the time of this Humidity.


        :return: The time of this Humidity.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time: str):
        """Sets the time of this Humidity.


        :param time: The time of this Humidity.
        :type time: str
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def station(self) -> str:
        """Gets the station of this Humidity.


        :return: The station of this Humidity.
        :rtype: str
        """
        return self._station

    @station.setter
    def station(self, station: str):
        """Sets the station of this Humidity.


        :param station: The station of this Humidity.
        :type station: str
        """
        if station is None:
            raise ValueError("Invalid value for `station`, must not be `None`")  # noqa: E501

        self._station = station

    @property
    def temp(self) -> float:
        """Gets the temp of this Humidity.


        :return: The temp of this Humidity.
        :rtype: float
        """
        return self._temp

    @temp.setter
    def temp(self, temp: float):
        """Sets the temp of this Humidity.


        :param temp: The temp of this Humidity.
        :type temp: float
        """
        if temp is None:
            raise ValueError("Invalid value for `temp`, must not be `None`")  # noqa: E501

        self._temp = temp
